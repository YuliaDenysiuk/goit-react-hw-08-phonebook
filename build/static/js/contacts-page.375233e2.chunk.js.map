{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","INITIAL_STATE","name","number","ContactForm","useState","contact","setContact","dispatch","useDispatch","handleChange","target","reset","onSubmit","e","preventDefault","contactsOperations","addContact","className","s","form","form__label","type","form__input","pattern","title","required","onChange","form__button","ContactList","isLoading","useSelector","contactsSelectors","contacts","filter","normalizedFilter","toLowerCase","includes","getFilteredContacts","items","useEffect","fetchContacts","Loader","map","id","contacts__item","contacts__button","onClick","deleteContact","onDeleteContact","Filter","getFilter","filter__input","contactsActions","filterContacts","ContactsView"],"mappings":"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","file":"static/js/contacts-page.375233e2.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3YIws\",\"form__input\":\"ContactForm_form__input__19paF\",\"form__label\":\"ContactForm_form__label__-u65x\",\"form__button\":\"ContactForm_form__button__2UTTz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__1-BVs\",\"contacts__item\":\"ContactList_contacts__item__DMaps\",\"contacts__button\":\"ContactList_contacts__button__3rMqi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1KN6o\",\"filter__input\":\"Filter_filter__input__2IG7J\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsOperations} from 'redux/contacts';\nimport s from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nfunction ContactForm() {\n  const [contact, setContact] = useState(INITIAL_STATE);\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setContact({\n      ...contact,\n      [name]: value\n    })\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsOperations.addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setContact(INITIAL_STATE);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.form__label}>\n        Name\n        <input\n          type=\"text\"\n          className={s.form__input}\n          name=\"name\"\n          value={contact.name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <label className={s.form__label}>\n        Phone\n        <input\n          type=\"tel\"\n          className={s.form__input}\n          name=\"number\"\n          value={contact.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleChange}\n        />\n      </label>\n      <button type=\"submit\" className={s.form__button}>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  target: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactForm;\n","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsSelectors, contactsOperations} from 'redux/contacts';\nimport s from './ContactList.module.css';\nimport { Loader } from 'components/Loader';\n\nconst getFilteredContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n};\n\nfunction ContactList() {\n  const isLoading = useSelector(contactsSelectors.isLoading);\n  const contacts = useSelector(({contacts: {items, filter}}) => getFilteredContacts(items, filter));\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const onDeleteContact = id => (dispatch(contactsOperations.deleteContact(id)));\n\n  return (\n  <>\n    {isLoading && <Loader />}\n    <ul className={s.contacts}>      \n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.contacts__item}>\n          {name}: {number}\n          <button type=\"button\" className={s.contacts__button} onClick={() => onDeleteContact(id)}>Delete</button>\n        </li>))}\n    </ul>\n  </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {contactsSelectors, contactsActions} from 'redux/contacts';\nimport s from './Filter.module.css';\n\nfunction Filter() {\n  const value = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = e => dispatch(contactsActions.filterContacts(e.target.value));\n\n  return (\n    <>\n      <p className={s.filter}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className={s.filter__input}\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        onChange={onFilterChange}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import {ContactForm} from 'components/ContactForm';\r\nimport {ContactList} from 'components/ContactList';\r\nimport { Filter } from 'components/Filter';\r\n\r\nfunction ContactsView() {\r\n  return (   \r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactsView;"],"sourceRoot":""}